plugins {
    id 'java'
    id("maven-publish")
}

group = 'plazmer'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url = 'https://github.com/getplusm/rpgcore'
        credentials {
            username 'getplusm'
            password 'AOIMD2o8aiund2a'
        }
    }

    maven {
        url = uri("https://maven.pkg.github.com/getplusm/RegionCommand")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("getplusm")
            password = project.findProperty("gpr.key") ?: System.getenv("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")
        }
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.18.2-R0.1-SNAPSHOT'


    compileOnly files('E:/TEST/1st AVES/plugins/PLAZMER-API-1.0.jar')
    compileOnly files('E:/TEST/1st AVES/plugins/service-1.0.jar')
    compileOnly files('E:/TEST/1st AVES/plugins/Titles-1.0.jar')
    compileOnly files('E:/TEST/1st AVES/plugins/PLAZMER-ENGINE-1.0.jar')
    compileOnly files('E:/TEST/1st AVES/plugins/PZUI-1.0.jar')
}

publishing {
    repositories {
        maven {
            name = "RegionCommand"
            url = uri("https://maven.pkg.github.com/getplusm/RegionCommand")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("getplusm")
                password = project.findProperty("gpr.key") ?: System.getenv("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")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
jar {
    destinationDirectory.set(file("E:/TEST/1st AVES/plugins/"))
}
//assemble.dependsOn(publish)